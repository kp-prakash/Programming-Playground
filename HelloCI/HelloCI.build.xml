<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="4.0"
         DefaultTargets="TestWithCoverage;FxCop">

  <!--Define this in order to use AsyncExec task which is part of the assembly mentioned below.
  This AsyncExec is in turn used to execute an asynchronous task like starting a website-->
  <UsingTask AssemblyFile=".\thirdparty\tools\MSBuildAsyncExec\AsyncExec.dll"
             TaskName="AsyncExec.AsyncExec" />

  <!--Refer to this tasks for running NCover Coverage-->
  <UsingTask AssemblyFile=".\thirdparty\tools\NCover\Build Task Plugins\NCover.MSBuildTasks.dll"
             TaskName="NCover.MSBuildTasks.NCover" />

  <!--Refer to this tasks for running NCover Reporting-->
  <UsingTask AssemblyFile=".\thirdparty\tools\NCover\Build Task Plugins\NCover.MSBuildTasks.dll"
             TaskName="NCover.MSBuildTasks.NCoverReporting" />

  <!--Refer to the MSBuildCommunityTasks to perform XmlRead. This is used to read and process the 
  FxCop Analysis XML and check if there are any errors or warnings.-->
  <UsingTask AssemblyFile=".\thirdparty\tools\MSBuildCommunityTasks\MSBuild.Community.Tasks.dll"
             TaskName="MSBuild.Community.Tasks.XmlRead" />

  <!-- ItemGroup helps avoid duplication so let us define one for 
  the buildartifacts folder which will be used in Clean, Init Targets.-->
  <ItemGroup>
    <BuildArtifacts Include=".\buildartifacts\" />
    <SolutionFile Include=".\HelloCI.sln" />
    <!--$(CommonProgramFiles) indicates c:\Program Files (x86)\Common Files\-->
    <Cassini Include="$(CommonProgramFiles)\microsoft shared\DevServer\11.0\WebDev.WebServer40.exe" />
    <Website Include=".\buildartifacts\_PublishedWebsites\HelloCI.Web" />
  </ItemGroup>

  <!--This item group has definitions related to tests-->
  <ItemGroup>
    <NUnit Include=".\thirdparty\tools\NUnit\nunit-console.exe" />
    <TestAssembly Include=".\buildartifacts\HelloCI.Tests.dll" />
    <TestResults Include=".\buildartifacts\TestResults.xml" />
  </ItemGroup>

  <!--NCover Details-->
  <ItemGroup>
    <NCoverPath Include=".\thirdparty\tools\NCover\"/>
    <NCoverCoverage Include=".\buildartifacts\coverage.nccov"/>
    <NCoverTrend Include=".\buildartifacts\coverage.trend"/>
    <CoverageReportDir Include=".\buildartifacts\coverage\"/>
  </ItemGroup>
  
  <!--FxCop-->
  <ItemGroup>
    <FxCop Include=".\thirdparty\tools\FxCop\FxCopCmd.exe" />
    <AssembliesToAnalyze Include=".\buildartifacts\HelloCI.Web.dll" />
    <ReferencedAssemblies Include=".\thirdparty\libs\Mvc\System.Web.Mvc.dll" />
    <AnalysisReport Include=".\buildartifacts\FxCopAnalysis.xml" />
  </ItemGroup>

  <!--Packaging and Deploying-->
  <ItemGroup>
    <MsDeploy Include=".\thirdparty\tools\Microsoft Web Deploy\msdeploy.exe" />
    <PackageFile Include=".\buildartifacts\package\HelloCI.zip" />
  </ItemGroup>

  <!--NCover Coverage Reporting-->
  <PropertyGroup>
    <CoveredAssemblies>HelloCI.Core;HelloCI.Web</CoveredAssemblies>
    <MinimumCoverage>
      <Threshold>
        <CoverageMetric>SymbolCoverage</CoverageMetric>
        <Type>View</Type>
        <Value>75</Value>
        <!--As of now setting this to 0 as no unit tests are implemented-->
      </Threshold>
    </MinimumCoverage>
  </PropertyGroup>

  <!--Enables switching between Debug and Release modes-->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == '' ">Debug</Configuration>
  </PropertyGroup>

  <!--Clean-->
  <Target Name="Clean">
    <RemoveDir Directories="@(BuildArtifacts)" />
  </Target>

  <!--Init-->
  <Target Name="Init" DependsOnTargets="Clean">
    <MakeDir Directories="@(BuildArtifacts)" />
  </Target>

  <!--Compile-->
  <Target Name="Compile" DependsOnTargets="Init">
    <!-- We need to specify the full path for OutDir in MSBuild Properties.
    Hence we need to use %(BuildArtifacts.FullPath) which return the full path.-->
    <MSBuild Projects="@(SolutionFile)" Targets="Rebuild"
             Properties="OutDir=%(BuildArtifacts.FullPath);Configuration=$(Configuration)">
    </MSBuild>
  </Target>

  <!--Test-->  
  <Target Name="Test" DependsOnTargets="Compile">
    <Exec Command="@(NUnit) @(TestAssembly) /xml=@(TestResults)" />
  </Target>

  <!--Test with Coverage-->
  <Target Name="TestWithCoverage" DependsOnTargets="Compile">
    <!--The NCover MSBuild task will run the NCover Coverage-->
    <NCover TestRunnerExe="@(NUnit)"
            TestRunnerArgs="@(TestAssembly) /xml=@(TestResults)"
            ToolPath="@(NCoverPath)"
            WorkingDirectory="@(SolutionRoot)"
            CoverageFile="@(NCoverCoverage)"
            AppendTrendTo="@(NCoverTrend)"
            IncludeAssemblies="$(CoveredAssemblies)"
            ProjectName="HelloCI"
            HtmlReportDir="@(CoverageReportDir)"/>
    <!--NCover Reporting-->
    <NCoverReporting MinimumCoverage="$(MinimumCoverage)"
                     CoverageDataPaths="@(NCoverCoverage)"
                     ToolPath="@(NCoverPath)"/>
  </Target>

  <!--FxCop-->
  <Target Name="FxCop" DependsOnTargets="Compile">
    <!--The command below runs FxCop analysis on the assemblies specified using the /file: and 
    uses the referenced assemblies using the /reference: and generates the report specified 
    using the /out: parameter.-->
    <Exec Command="@(FxCop) /file:@(AssembliesToAnalyze) /reference:@(ReferencedAssemblies) /out:@(AnalysisReport)" />

    <!--The code below is required to fail the build in case FxCop reports any errors / warnings.-->
    <!-- From John Rayner (http://www.sharpfellows.com/post/Getting-FxCop-to-break-the-build.aspx) -->
    <PropertyGroup>
      <FxCopCriticalErrors>0</FxCopCriticalErrors>
      <FxCopErrors>0</FxCopErrors>
      <FxCopCriticalWarnings>0</FxCopCriticalWarnings>
    </PropertyGroup>
    <XmlRead ContinueOnError="True"
             XmlFileName="@(AnalysisReport)"
             XPath="string(count(//Issue[@Level='CriticalError']))">
      <Output TaskParameter="Value" PropertyName="FxCopCriticalErrors" />
    </XmlRead>
    <XmlRead ContinueOnError="True"
             XmlFileName="@(AnalysisReport)"
             XPath="string(count(//Issue[@Level='Error']))">
      <Output TaskParameter="Value" PropertyName="FxCopErrors" />
    </XmlRead>
    <XmlRead ContinueOnError="True"
             XmlFileName="@(AnalysisReport)"
             XPath="string(count(//Issue[@Level='CriticalWarning']))">
      <Output TaskParameter="Value" PropertyName="FxCopCriticalWarnings" />
    </XmlRead>
    <Error Text="FxCop encountered $(Count) material rule violations"
           Condition="$(FxCopCriticalErrors) &gt; 0 or $(FxCopErrors) &gt; 0 or $(FxCopCriticalWarnings) &gt; 0" />
  </Target>
  
  <!--Packaging-->
  <Target Name="Package" DependsOnTargets="Compile;TestWithCoverage;FxCop">
    <!--Define the property group to contain the variables to be used in the command-->
    <PropertyGroup>
      <PackageDir>%(PackageFile.RootDir)%(PackageFile.Directory)</PackageDir>
      <Source>%(Website.FullPath)</Source>
      <Destination>%(PackageFile.FullPath)</Destination>
    </PropertyGroup>
    <!--Create a new directory for package directory-->
    <MakeDir Directories="$(PackageDir)" />
    <Exec Command='"@(MsDeploy)" -verb:sync -source:iisApp="$(Source)" -dest:package="$(Destination)"' />
  </Target>
  
  <!--Automating other tasks using build script. Example: We will start a website
  Though StartWebsite depends on StopWebsite, we need to compile the code and restart.
  So add Compile to the DependsOnTargets-->
  
  <!--Start Website-->
  <Target Name="StartWebsite" DependsOnTargets="StopWebsite;Compile">
    <!--Using AsyncExec to execute the task asynchronously-->
    <AsyncExec Command='"@(Cassini)" /port:9999 /path:"%(Website.Fullpath)" /vpath:' />
  </Target>

  <!--Stop Website-->
  <Target Name="StopWebsite">
    <!--Use the taskkill to kill the task. /f for forcing task kill and /im for using image name.
    We need to kill if the process is running and otherwise we should not report an error code.
    Pass in true for IgnoreExitCode and IgnoreStandardErrorWarningFormat-->
    <Exec Command="taskkill /f /im WebDev.WebServer40.exe"
          IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true"/>
  </Target>
</Project>